    Profile = require("./profile"),
    profiles = Profile.getProfiles(),
    clear = function() { process.stdout.write("\u001b[2J\u001b[0;0H"); },
    menu;


var menus = {

  start: function() {
    menu = createMenu({
      width: process.stdout.columns - 4,
      height: process.stdout.rows - 4,
      x: 0,
      y: 0
    });
    menu.reset();
    menu.createStream().pipe(process.stdout);
  },

  addOptions: function() {
    Array.prototype.slice.call(arguments).forEach(function(label) { menu.add(label); });
  },

  finalise: function() {
    menu.write('\n');
    this.addOptions.apply(this,arguments);
  },

  handle: function(handler) {
    menu.on('select', handler);
  },

  runTask: function(profile) {
    menu.close();
    clear();
    console.log("running", profile);
  },

  installMenu: function() {
    this.start();
    menu.write('Install Webmaker Suite Components\n');
    menu.write('\n');

    Object.keys(components).forEach(function(c) {
      menu.write(c + "\n");
      Object.keys(components[c]).forEach(function(k) {
        label = "[ ] " + k;
        menu.add(label);
      });
      menu.write("\n");
    });

    var install = "[Install selected components]",
        cancel = "[Cancel] (back to main menu)";
    this.finalise(install, cancel);

    this.handle(function (label) {
      menu.close();
      if(label === install) {
        // go on a clone/install spree
        this.main();
      }
      else if (label === cancel) {
        this.main();
      }
    }.bind(this));
  },

  updateMenu: function() {
    this.start();
    menu.write('Update Webmaker Suite Components\n');
    menu.write('\n');

    Object.keys(components).forEach(function(c) {
      menu.write(c + "\n");
      Object.keys(components[c]).forEach(function(k) {
        label = "[ ] " + k;
        menu.add(label);
      });
      menu.write("\n");
    });


    var update = "[Update selected components]",
        cancel = "[Cancel] (back to main menu)";
    this.finalise(update, cancel);

    this.handle(function (label) {
      menu.close();
      if(label === update) {
        this.main();
      }
      else if (label === cancel) {
        this.main();
      }
    }.bind(this));
  },

  syncMenu: function() {
    this.start();
    menu.write('Sync Webmaker Suite Components to mozilla/master\n');
    menu.write('\n');

    Object.keys(components).forEach(function(c) {
      menu.write(c + "\n");
      Object.keys(components[c]).forEach(function(k) {
        label = "[ ] " + k;
        menu.add(label);
      });
      menu.write("\n");
    });


    var sync = "[Sync selected components]",
        cancel = "[Cancel] (back to main menu)";
    this.finalise(sync, cancel);

    this.handle(function (label) {
      menu.close();
      if(label === sync) {
        this.main();
      }
      else if (label === cancel) {
        this.main();
      }
    }.bind(this));
  },


  main: function() {
    var self = this;
    this.profile = false;

    this.start();
    menu.write('The Mozilla Webmaker Suite Task Runner v1.0\n');
    menu.write('\n');

    var install = "[Install components]";
    var update = "[Update components]";
    var sync = "[Sync components to master]";

    this.addOptions(install, update, sync);

    if(profiles.length > 0) {
      menu.write('\n');
      menu.write('Run from profile:\n');
      menu.write('\n');

      profiles.forEach(function(profile, idx) {
        profile = new Profile.profile(profile);
        var label = "["+(idx+1)+"] " + profile.getName();
        menu.add(label);
        (function(_profile) {
          menu.on('select', function(_label) {
            if(_label === label) {
              self.runTask(_profile);
            }
          });
        }(profile));
      });
      menu.write('\n');
      menu.jump(3);
    }

    var createNew = "[Create a " + (profiles.length>0 ? 'new ' : '') + "run profile]";
    menu.add(createNew);

    var exit = "[Exit]";
    this.finalise(exit);

    this.handle(function (label) {
      menu.close();
      if(label === createNew) {
        this.newProfile();
      }
      else if (label === install) {
        this.installMenu();
      }
      else if (label === update) {
        this.updateMenu();
      }
      else if (label === sync) {
        this.syncMenu();
      }
      else {
        clear();
        process.exit();
      }
    }.bind(this));
  },

  newProfile: function(option) {
    this.profile = this.profile || new Profile.profile();
    this.start();
    this.profile.setupMenu(menu);

    if(option) { menu.jump(option); }

    var save = "Save profile",
        cancel = "Cancel (back to main menu)";

    this.finalise(save, cancel);

    this.handle(function(label) {
      menu.close();
      if(label === save) {
        this.profile.save();
        this.main();
      }
      else if(label === cancel) {
        this.profile.discard();
        this.main();
      }
      else {
        this.newProfile(this.profile.toggled);
      }
    }.bind(this));
  }
};

